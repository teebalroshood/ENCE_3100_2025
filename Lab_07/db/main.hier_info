|main
MAX10_CLK1_50 => w_clk.IN3
SW[0] => ~NO_FANOUT~
SW[1] => ~NO_FANOUT~
SW[2] => ~NO_FANOUT~
SW[3] => ~NO_FANOUT~
SW[4] => ~NO_FANOUT~
SW[5] => ~NO_FANOUT~
SW[6] => ~NO_FANOUT~
SW[7] => ~NO_FANOUT~
SW[8] => ~NO_FANOUT~
SW[9] => SW[9].IN1
LEDR[0] <= GPout[0].DB_MAX_OUTPUT_PORT_TYPE
LEDR[1] <= GPout[1].DB_MAX_OUTPUT_PORT_TYPE
LEDR[2] <= GPout[2].DB_MAX_OUTPUT_PORT_TYPE
LEDR[3] <= GPout[3].DB_MAX_OUTPUT_PORT_TYPE
LEDR[4] <= GPout[4].DB_MAX_OUTPUT_PORT_TYPE
LEDR[5] <= GPout[5].DB_MAX_OUTPUT_PORT_TYPE
LEDR[6] <= GPout[6].DB_MAX_OUTPUT_PORT_TYPE
LEDR[7] <= GPout[7].DB_MAX_OUTPUT_PORT_TYPE
LEDR[8] <= <GND>
LEDR[9] <= <GND>
GPIO[0] <> <UNC>
GPIO[1] <> <UNC>
GPIO[2] <> <UNC>
GPIO[3] <> <UNC>
GPIO[4] <> <UNC>
GPIO[5] <> <UNC>
GPIO[6] <> <UNC>
GPIO[7] <> <UNC>
GPIO[8] <> <UNC>
GPIO[9] <> <UNC>
GPIO[10] <> <UNC>
GPIO[11] <> <UNC>
GPIO[12] <> <UNC>
GPIO[13] <> <UNC>
GPIO[14] <> <UNC>
GPIO[15] <> <UNC>
GPIO[16] <> <UNC>
GPIO[17] <> <UNC>
GPIO[18] <> <UNC>
GPIO[19] <> <UNC>
GPIO[20] <> <UNC>
GPIO[21] <> <UNC>
GPIO[22] <> <UNC>
GPIO[23] <> <UNC>
GPIO[24] <> <UNC>
GPIO[25] <> <UNC>
GPIO[26] <> <UNC>
GPIO[27] <> <UNC>
GPIO[28] <> <UNC>
GPIO[29] <> <UNC>
GPIO[30] <> <UNC>
GPIO[31] <> <UNC>
GPIO[32] <> <UNC>
GPIO[33] <> async_transmitter:TX.TxD
GPIO[34] <> <UNC>
GPIO[35] <> async_receiver:RX.RxD
HEX0[0] <= FSM_Word_Detecter:word_detector.HEX0
HEX0[1] <= FSM_Word_Detecter:word_detector.HEX0
HEX0[2] <= FSM_Word_Detecter:word_detector.HEX0
HEX0[3] <= FSM_Word_Detecter:word_detector.HEX0
HEX0[4] <= FSM_Word_Detecter:word_detector.HEX0
HEX0[5] <= FSM_Word_Detecter:word_detector.HEX0
HEX0[6] <= FSM_Word_Detecter:word_detector.HEX0
HEX1[0] <= FSM_Word_Detecter:word_detector.HEX1
HEX1[1] <= FSM_Word_Detecter:word_detector.HEX1
HEX1[2] <= FSM_Word_Detecter:word_detector.HEX1
HEX1[3] <= FSM_Word_Detecter:word_detector.HEX1
HEX1[4] <= FSM_Word_Detecter:word_detector.HEX1
HEX1[5] <= FSM_Word_Detecter:word_detector.HEX1
HEX1[6] <= FSM_Word_Detecter:word_detector.HEX1
HEX2[0] <= FSM_Word_Detecter:word_detector.HEX2
HEX2[1] <= FSM_Word_Detecter:word_detector.HEX2
HEX2[2] <= FSM_Word_Detecter:word_detector.HEX2
HEX2[3] <= FSM_Word_Detecter:word_detector.HEX2
HEX2[4] <= FSM_Word_Detecter:word_detector.HEX2
HEX2[5] <= FSM_Word_Detecter:word_detector.HEX2
HEX2[6] <= FSM_Word_Detecter:word_detector.HEX2
HEX3[0] <= FSM_Word_Detecter:word_detector.HEX3
HEX3[1] <= FSM_Word_Detecter:word_detector.HEX3
HEX3[2] <= FSM_Word_Detecter:word_detector.HEX3
HEX3[3] <= FSM_Word_Detecter:word_detector.HEX3
HEX3[4] <= FSM_Word_Detecter:word_detector.HEX3
HEX3[5] <= FSM_Word_Detecter:word_detector.HEX3
HEX3[6] <= FSM_Word_Detecter:word_detector.HEX3
HEX4[0] <= FSM_Word_Detecter:word_detector.HEX4
HEX4[1] <= FSM_Word_Detecter:word_detector.HEX4
HEX4[2] <= FSM_Word_Detecter:word_detector.HEX4
HEX4[3] <= FSM_Word_Detecter:word_detector.HEX4
HEX4[4] <= FSM_Word_Detecter:word_detector.HEX4
HEX4[5] <= FSM_Word_Detecter:word_detector.HEX4
HEX4[6] <= FSM_Word_Detecter:word_detector.HEX4
HEX5[0] <= <VCC>
HEX5[1] <= <VCC>
HEX5[2] <= <VCC>
HEX5[3] <= <VCC>
HEX5[4] <= <VCC>
HEX5[5] <= <VCC>
HEX5[6] <= <VCC>
HEX6[0] <= <VCC>
HEX6[1] <= <VCC>
HEX6[2] <= <VCC>
HEX6[3] <= <VCC>
HEX6[4] <= <VCC>
HEX6[5] <= <VCC>
HEX6[6] <= <VCC>


|main|async_receiver:RX
clk => clk.IN1
RxD => RxD_sync[0].DATAIN
RxD_data_ready <= RxD_data_ready~reg0.DB_MAX_OUTPUT_PORT_TYPE
RxD_data[0] <= RxD_data[0]~reg0.DB_MAX_OUTPUT_PORT_TYPE
RxD_data[1] <= RxD_data[1]~reg0.DB_MAX_OUTPUT_PORT_TYPE
RxD_data[2] <= RxD_data[2]~reg0.DB_MAX_OUTPUT_PORT_TYPE
RxD_data[3] <= RxD_data[3]~reg0.DB_MAX_OUTPUT_PORT_TYPE
RxD_data[4] <= RxD_data[4]~reg0.DB_MAX_OUTPUT_PORT_TYPE
RxD_data[5] <= RxD_data[5]~reg0.DB_MAX_OUTPUT_PORT_TYPE
RxD_data[6] <= RxD_data[6]~reg0.DB_MAX_OUTPUT_PORT_TYPE
RxD_data[7] <= RxD_data[7]~reg0.DB_MAX_OUTPUT_PORT_TYPE
RxD_idle <= GapCnt[5].DB_MAX_OUTPUT_PORT_TYPE
RxD_endofpacket <= RxD_endofpacket~reg0.DB_MAX_OUTPUT_PORT_TYPE


|main|async_receiver:RX|BaudTickGen:tickgen
clk => Acc[4].CLK
clk => Acc[5].CLK
clk => Acc[6].CLK
clk => Acc[7].CLK
clk => Acc[8].CLK
clk => Acc[9].CLK
clk => Acc[10].CLK
clk => Acc[11].CLK
clk => Acc[12].CLK
clk => Acc[13].CLK
clk => Acc[14].CLK
clk => Acc[15].CLK
clk => Acc[16].CLK
clk => Acc[17].CLK
enable => Acc.OUTPUTSELECT
enable => Acc.OUTPUTSELECT
enable => Acc.OUTPUTSELECT
enable => Acc.OUTPUTSELECT
enable => Acc.OUTPUTSELECT
enable => Acc.OUTPUTSELECT
enable => Acc.OUTPUTSELECT
enable => Acc.OUTPUTSELECT
enable => Acc.OUTPUTSELECT
enable => Acc.OUTPUTSELECT
enable => Acc.OUTPUTSELECT
enable => Acc.OUTPUTSELECT
enable => Acc.OUTPUTSELECT
enable => Acc.OUTPUTSELECT
tick <= Acc[17].DB_MAX_OUTPUT_PORT_TYPE


|main|async_transmitter:TX
clk => clk.IN1
TxD_start => always0.IN1
TxD_start => TxD_state.OUTPUTSELECT
TxD_start => TxD_state.OUTPUTSELECT
TxD_start => TxD_state.OUTPUTSELECT
TxD_start => TxD_state.OUTPUTSELECT
TxD_data[0] => TxD_shift.DATAB
TxD_data[1] => TxD_shift.DATAB
TxD_data[2] => TxD_shift.DATAB
TxD_data[3] => TxD_shift.DATAB
TxD_data[4] => TxD_shift.DATAB
TxD_data[5] => TxD_shift.DATAB
TxD_data[6] => TxD_shift.DATAB
TxD_data[7] => TxD_shift.DATAB
TxD <= TxD.DB_MAX_OUTPUT_PORT_TYPE
TxD_busy <= TxD_busy.DB_MAX_OUTPUT_PORT_TYPE


|main|async_transmitter:TX|BaudTickGen:tickgen
clk => Acc[1].CLK
clk => Acc[2].CLK
clk => Acc[3].CLK
clk => Acc[4].CLK
clk => Acc[5].CLK
clk => Acc[6].CLK
clk => Acc[7].CLK
clk => Acc[8].CLK
clk => Acc[9].CLK
clk => Acc[10].CLK
clk => Acc[11].CLK
clk => Acc[12].CLK
clk => Acc[13].CLK
clk => Acc[14].CLK
clk => Acc[15].CLK
clk => Acc[16].CLK
clk => Acc[17].CLK
enable => Acc.OUTPUTSELECT
enable => Acc.OUTPUTSELECT
enable => Acc.OUTPUTSELECT
enable => Acc.OUTPUTSELECT
enable => Acc.OUTPUTSELECT
enable => Acc.OUTPUTSELECT
enable => Acc.OUTPUTSELECT
enable => Acc.OUTPUTSELECT
enable => Acc.OUTPUTSELECT
enable => Acc.OUTPUTSELECT
enable => Acc.OUTPUTSELECT
enable => Acc.OUTPUTSELECT
enable => Acc.OUTPUTSELECT
enable => Acc.OUTPUTSELECT
enable => Acc.OUTPUTSELECT
enable => Acc.OUTPUTSELECT
enable => Acc.OUTPUTSELECT
tick <= Acc[17].DB_MAX_OUTPUT_PORT_TYPE


|main|FSM_Word_Detecter:word_detector
clk => HEX4[0]~reg0.CLK
clk => HEX4[1]~reg0.CLK
clk => HEX4[2]~reg0.CLK
clk => HEX4[3]~reg0.CLK
clk => HEX4[4]~reg0.CLK
clk => HEX4[5]~reg0.CLK
clk => HEX4[6]~reg0.CLK
clk => HEX3[0]~reg0.CLK
clk => HEX3[1]~reg0.CLK
clk => HEX3[2]~reg0.CLK
clk => HEX3[3]~reg0.CLK
clk => HEX3[4]~reg0.CLK
clk => HEX3[5]~reg0.CLK
clk => HEX3[6]~reg0.CLK
clk => HEX2[0]~reg0.CLK
clk => HEX2[1]~reg0.CLK
clk => HEX2[2]~reg0.CLK
clk => HEX2[3]~reg0.CLK
clk => HEX2[4]~reg0.CLK
clk => HEX2[5]~reg0.CLK
clk => HEX2[6]~reg0.CLK
clk => HEX1[0]~reg0.CLK
clk => HEX1[1]~reg0.CLK
clk => HEX1[2]~reg0.CLK
clk => HEX1[3]~reg0.CLK
clk => HEX1[4]~reg0.CLK
clk => HEX1[5]~reg0.CLK
clk => HEX1[6]~reg0.CLK
clk => HEX0[0]~reg0.CLK
clk => HEX0[1]~reg0.CLK
clk => HEX0[2]~reg0.CLK
clk => HEX0[3]~reg0.CLK
clk => HEX0[4]~reg0.CLK
clk => HEX0[5]~reg0.CLK
clk => HEX0[6]~reg0.CLK
clk => blink_state.CLK
clk => counter[0].CLK
clk => counter[1].CLK
clk => counter[2].CLK
clk => counter[3].CLK
clk => counter[4].CLK
clk => counter[5].CLK
clk => counter[6].CLK
clk => counter[7].CLK
clk => counter[8].CLK
clk => counter[9].CLK
clk => counter[10].CLK
clk => counter[11].CLK
clk => counter[12].CLK
clk => counter[13].CLK
clk => counter[14].CLK
clk => counter[15].CLK
clk => counter[16].CLK
clk => counter[17].CLK
clk => counter[18].CLK
clk => counter[19].CLK
clk => counter[20].CLK
clk => counter[21].CLK
clk => counter[22].CLK
clk => counter[23].CLK
clk => counter[24].CLK
clk => counter[25].CLK
clk => counter[26].CLK
clk => counter[27].CLK
clk => state~1.DATAIN
reset => HEX4[0]~reg0.PRESET
reset => HEX4[1]~reg0.PRESET
reset => HEX4[2]~reg0.PRESET
reset => HEX4[3]~reg0.PRESET
reset => HEX4[4]~reg0.PRESET
reset => HEX4[5]~reg0.PRESET
reset => HEX4[6]~reg0.PRESET
reset => HEX3[0]~reg0.PRESET
reset => HEX3[1]~reg0.PRESET
reset => HEX3[2]~reg0.PRESET
reset => HEX3[3]~reg0.PRESET
reset => HEX3[4]~reg0.PRESET
reset => HEX3[5]~reg0.PRESET
reset => HEX3[6]~reg0.PRESET
reset => HEX2[0]~reg0.PRESET
reset => HEX2[1]~reg0.PRESET
reset => HEX2[2]~reg0.PRESET
reset => HEX2[3]~reg0.PRESET
reset => HEX2[4]~reg0.PRESET
reset => HEX2[5]~reg0.PRESET
reset => HEX2[6]~reg0.PRESET
reset => HEX1[0]~reg0.PRESET
reset => HEX1[1]~reg0.PRESET
reset => HEX1[2]~reg0.PRESET
reset => HEX1[3]~reg0.PRESET
reset => HEX1[4]~reg0.PRESET
reset => HEX1[5]~reg0.PRESET
reset => HEX1[6]~reg0.PRESET
reset => HEX0[0]~reg0.PRESET
reset => HEX0[1]~reg0.PRESET
reset => HEX0[2]~reg0.PRESET
reset => HEX0[3]~reg0.PRESET
reset => HEX0[4]~reg0.PRESET
reset => HEX0[5]~reg0.PRESET
reset => HEX0[6]~reg0.PRESET
reset => blink_state.PRESET
reset => counter[0].ACLR
reset => counter[1].ACLR
reset => counter[2].ACLR
reset => counter[3].ACLR
reset => counter[4].ACLR
reset => counter[5].ACLR
reset => counter[6].ACLR
reset => counter[7].ACLR
reset => counter[8].ACLR
reset => counter[9].ACLR
reset => counter[10].ACLR
reset => counter[11].ACLR
reset => counter[12].ACLR
reset => counter[13].ACLR
reset => counter[14].ACLR
reset => counter[15].ACLR
reset => counter[16].ACLR
reset => counter[17].ACLR
reset => counter[18].ACLR
reset => counter[19].ACLR
reset => counter[20].ACLR
reset => counter[21].ACLR
reset => counter[22].ACLR
reset => counter[23].ACLR
reset => counter[24].ACLR
reset => counter[25].ACLR
reset => counter[26].ACLR
reset => counter[27].ACLR
reset => state~3.DATAIN
RXD_data[0] => Equal0.IN7
RXD_data[0] => Equal1.IN3
RXD_data[0] => Equal2.IN7
RXD_data[0] => Equal3.IN5
RXD_data[1] => Equal0.IN6
RXD_data[1] => Equal1.IN7
RXD_data[1] => Equal2.IN6
RXD_data[1] => Equal3.IN4
RXD_data[2] => Equal0.IN5
RXD_data[2] => Equal1.IN2
RXD_data[2] => Equal2.IN3
RXD_data[2] => Equal3.IN3
RXD_data[3] => Equal0.IN2
RXD_data[3] => Equal1.IN6
RXD_data[3] => Equal2.IN2
RXD_data[3] => Equal3.IN2
RXD_data[4] => Equal0.IN4
RXD_data[4] => Equal1.IN5
RXD_data[4] => Equal2.IN5
RXD_data[4] => Equal3.IN7
RXD_data[5] => Equal0.IN1
RXD_data[5] => Equal1.IN1
RXD_data[5] => Equal2.IN1
RXD_data[5] => Equal3.IN1
RXD_data[6] => Equal0.IN0
RXD_data[6] => Equal1.IN0
RXD_data[6] => Equal2.IN0
RXD_data[6] => Equal3.IN0
RXD_data[7] => Equal0.IN3
RXD_data[7] => Equal1.IN4
RXD_data[7] => Equal2.IN4
RXD_data[7] => Equal3.IN6
data_ready => always1.IN1
data_ready => always1.IN1
data_ready => next_state.OUTPUTSELECT
data_ready => next_state.OUTPUTSELECT
data_ready => next_state.OUTPUTSELECT
data_ready => next_state.OUTPUTSELECT
data_ready => next_state.OUTPUTSELECT
data_ready => next_state.OUTPUTSELECT
data_ready => next_state.OUTPUTSELECT
data_ready => always1.IN1
data_ready => always1.IN1
HEX0[0] <= HEX0[0]~reg0.DB_MAX_OUTPUT_PORT_TYPE
HEX0[1] <= HEX0[1]~reg0.DB_MAX_OUTPUT_PORT_TYPE
HEX0[2] <= HEX0[2]~reg0.DB_MAX_OUTPUT_PORT_TYPE
HEX0[3] <= HEX0[3]~reg0.DB_MAX_OUTPUT_PORT_TYPE
HEX0[4] <= HEX0[4]~reg0.DB_MAX_OUTPUT_PORT_TYPE
HEX0[5] <= HEX0[5]~reg0.DB_MAX_OUTPUT_PORT_TYPE
HEX0[6] <= HEX0[6]~reg0.DB_MAX_OUTPUT_PORT_TYPE
HEX1[0] <= HEX1[0]~reg0.DB_MAX_OUTPUT_PORT_TYPE
HEX1[1] <= HEX1[1]~reg0.DB_MAX_OUTPUT_PORT_TYPE
HEX1[2] <= HEX1[2]~reg0.DB_MAX_OUTPUT_PORT_TYPE
HEX1[3] <= HEX1[3]~reg0.DB_MAX_OUTPUT_PORT_TYPE
HEX1[4] <= HEX1[4]~reg0.DB_MAX_OUTPUT_PORT_TYPE
HEX1[5] <= HEX1[5]~reg0.DB_MAX_OUTPUT_PORT_TYPE
HEX1[6] <= HEX1[6]~reg0.DB_MAX_OUTPUT_PORT_TYPE
HEX2[0] <= HEX2[0]~reg0.DB_MAX_OUTPUT_PORT_TYPE
HEX2[1] <= HEX2[1]~reg0.DB_MAX_OUTPUT_PORT_TYPE
HEX2[2] <= HEX2[2]~reg0.DB_MAX_OUTPUT_PORT_TYPE
HEX2[3] <= HEX2[3]~reg0.DB_MAX_OUTPUT_PORT_TYPE
HEX2[4] <= HEX2[4]~reg0.DB_MAX_OUTPUT_PORT_TYPE
HEX2[5] <= HEX2[5]~reg0.DB_MAX_OUTPUT_PORT_TYPE
HEX2[6] <= HEX2[6]~reg0.DB_MAX_OUTPUT_PORT_TYPE
HEX3[0] <= HEX3[0]~reg0.DB_MAX_OUTPUT_PORT_TYPE
HEX3[1] <= HEX3[1]~reg0.DB_MAX_OUTPUT_PORT_TYPE
HEX3[2] <= HEX3[2]~reg0.DB_MAX_OUTPUT_PORT_TYPE
HEX3[3] <= HEX3[3]~reg0.DB_MAX_OUTPUT_PORT_TYPE
HEX3[4] <= HEX3[4]~reg0.DB_MAX_OUTPUT_PORT_TYPE
HEX3[5] <= HEX3[5]~reg0.DB_MAX_OUTPUT_PORT_TYPE
HEX3[6] <= HEX3[6]~reg0.DB_MAX_OUTPUT_PORT_TYPE
HEX4[0] <= HEX4[0]~reg0.DB_MAX_OUTPUT_PORT_TYPE
HEX4[1] <= HEX4[1]~reg0.DB_MAX_OUTPUT_PORT_TYPE
HEX4[2] <= HEX4[2]~reg0.DB_MAX_OUTPUT_PORT_TYPE
HEX4[3] <= HEX4[3]~reg0.DB_MAX_OUTPUT_PORT_TYPE
HEX4[4] <= HEX4[4]~reg0.DB_MAX_OUTPUT_PORT_TYPE
HEX4[5] <= HEX4[5]~reg0.DB_MAX_OUTPUT_PORT_TYPE
HEX4[6] <= HEX4[6]~reg0.DB_MAX_OUTPUT_PORT_TYPE


